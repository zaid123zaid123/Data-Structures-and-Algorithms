# s1 = set() 
# s2 = {1, 3, 5} 
# s3 = set([1, 3, 5]) 
# s4 = set([x * 2 for x in range(1, 10)]) 
# s5 = set("abac") 
# s6 = s1|s2|s3|s4|s5
# print (s6)  
# print(sum(s2))
# print(max(s2))
# print(min(s2))
# print(s2.intersection(s3) )


# dictionary = {"karim":22210145, "Mohammad":22210198, "Mos":22210233, "naser":22210155} 
# dictionary  ["mohammad hroub"] = 55
# del dictionary["Mos"]
# print(dictionary)
# print("karim" in dictionary)


# def main():
#     # Prompt the user to enter a file
#     filename = input("Enter a filename: ").strip()
#     inputFile = open(filename, "r") # Open the file

#     wordCounts = {} # Create an empty dictionary to count words
#     for line in inputFile:
#         processLine(line.lower(), wordCounts)
#     inputFile.close()
     
#     pairs = list(wordCounts.items()) # Get pairs from the dictionary   

#     items = [[count, word] for (word, count) in pairs] 
#     items.sort(reverse = True) # Sort pairs in items
    
#     for count, word in items[ : 10]: # Slice the first 10 items
#         print(word, count, sep =  '\t')  
  
# # Count each word in the line
# def processLine(line, wordCounts): 
#     line = replacePunctuation(line) # Replace punctuation with space
#     words = line.split() # Get words from each line
#     for word in words:
#         if word in wordCounts:
#             wordCounts[word] += 1 # Increase count for word
#         else:
#             wordCounts[word] = 1 # Add an item in the dictionary

# # Replace punctuation in the line with space
# def replacePunctuation(line):
#     for ch in line:
#         if ch in "~@#$%^&*()_-+=~<>?/,.;:!{}[]|'\"":
#             line = line.replace(ch, " ")

#     return line

# main() # Call the main function

#******************************************************************************************************************************************************12*/10

class Node:
    def __init__(self, element):
        self.elmenet = element
        self.next = None
















































































